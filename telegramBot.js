const TelegramBot = require('node-telegram-bot-api')
const { iphoneModels, getPhone, links } = require('./src/parsers/appleParser')
const { getJwCurrentArticleTitle } = require('./src/parsers/jwParser')
require('dotenv').config()
// const osxTemp = require('osx-temperature-sensor')

const token = process.env.TELEGRAM_BOT_TOKEN
if (!token) {
  console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ')
  process.exit(1)
}

const options = {
  polling: true,
}

const bot = new TelegramBot(token, options)

const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üçé –ö–∞—Ç–∞–ª–æ–≥ iPhone', 'üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã'],
      ['üí∞ –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'],
      ['üîã –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', 'üì∞ –°—Ç–∞—Ç—å—è JW.org'],
      ['‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
    ],
    resize_keyboard: true,
  },
}

const phoneTypesMenu = {
  reply_markup: {
    keyboard: [['iPhone', 'Android'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
    resize_keyboard: true,
  },
}

const iphoneModelsMenu = {
  reply_markup: {
    keyboard: [...Object.keys(links['iphone']).map(version => [`iPhone ${version}`]), ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞']],
    resize_keyboard: true,
  },
}

const samsungModelsMenu = {
  reply_markup: {
    keyboard: [...Object.keys(links['samsung']).map(version => [`Samsung ${version}`]), ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞']],
    resize_keyboard: true,
  },
}

const jwChats = new Set()
let jwIntervalStarted = false
let lastJwTitle = ''

bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id
  const firstName = msg.from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

  const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:`

  bot.sendMessage(chatId, welcomeMessage, mainMenu)
})

bot.onText(/üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneTypesMenu)
})

bot.onText(/iPhone$/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:', iphoneModelsMenu)
})

bot.onText(/Samsung$/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Samsung:', samsungModelsMenu)
})

bot.onText(/iPhone (1[2-6])$/, async (msg, match) => {
  const chatId = msg.chat.id
  const version = match[1]

  const models = Object.keys(links['iphone'][version])

  const modelsKeyboard = {
    reply_markup: {
      keyboard: [
        ...Array.from({ length: Math.ceil(models.length / 2) }, (_, i) =>
          models.slice(i * 2, i * 2 + 2).map(model => `iPhone ${version} ${model}`)
        ),
        ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–µ—Ä—Å–∏–∏'],
      ],
      resize_keyboard: true,
    },
  }

  bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é iPhone ${version}:`, modelsKeyboard)
})

bot.onText(/Samsung (2[0-9])/, async (msg, match) => {
  const chatId = msg.chat.id
  const version = match[1]

  const models = Object.keys(links['samsung'][version])

  const modelsKeyboard = {
    reply_markup: {
      keyboard: [
        ...Array.from({ length: Math.ceil(models.length / 2) }, (_, i) =>
          models.slice(i * 2, i * 2 + 2).map(model => `Samsung ${version} ${model}`)
        ),
        ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–µ—Ä—Å–∏–∏'],
      ],
      resize_keyboard: true,
    },
  }

  bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é Samsung ${version}:`, modelsKeyboard)
})

bot.onText(/iPhone (1[2-6]) (.*)/, async (msg, match) => {
  const chatId = msg.chat.id
  const version = match[1]
  const model = match[2]

  bot.sendChatAction(chatId, 'typing')

  try {
    const phoneData = await getPhone('iphone', version, model, msg)

    if (!phoneData) {
      return bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ iPhone ${version} ${model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`, mainMenu)
    }

    const waitMessage = await bot.sendMessage(
      chatId,
      `–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ iPhone ${version} ${model}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`
    )

    bot.deleteMessage(chatId, waitMessage.message_id)

    bot.sendMessage(chatId, phoneData.text)
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö iPhone ${version} ${model}:`, error.message)
    bot.sendMessage(
      chatId,
      `üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ iPhone ${version} ${model}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      mainMenu
    )
  }
})

bot.onText(/Samsung (2[0-9]) (.*)/, async (msg, match) => {
  const chatId = msg.chat.id
  const version = match[1]
  const model = match[2]

  bot.sendChatAction(chatId, 'typing')

  try {
    const phoneData = await getPhone('samsung', version, model, msg)

    if (!phoneData) {
      return bot.sendMessage(chatId, `–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ Samsung ${version} ${model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`, mainMenu)
    }

    const waitMessage = await bot.sendMessage(
      chatId,
      `–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Samsung ${version} ${model}... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`
    )

    bot.deleteMessage(chatId, waitMessage.message_id)

    bot.sendMessage(chatId, phoneData.text)
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Samsung ${version} ${model}:`, error.message)
    bot.sendMessage(
      chatId,
      `üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ Samsung ${version} ${model}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      mainMenu
    )
  }
})

bot.onText(/Android/, msg => {
  const chatId = msg.chat.id

  const samsungModelsMenu = {
    reply_markup: {
      keyboard: [['Samsung'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞']],
      resize_keyboard: true,
    },
  }

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Samsung:', samsungModelsMenu)
})

bot.onText(/‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainMenu)
})

bot.onText(/‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phoneTypesMenu)
})

bot.onText(/\/prices|üçé –ö–∞—Ç–∞–ª–æ–≥ iPhone/, async msg => {
  const chatId = msg.chat.id

  try {
    bot.sendChatAction(chatId, 'typing')

    const waitMessage = await bot.sendMessage(
      chatId,
      '–ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.'
    )

    const catalog = await getIphones()

    if (catalog.length === 0) {
      return bot.sendMessage(chatId, 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainMenu)
    }

    bot.deleteMessage(chatId, waitMessage.message_id)

    bot.sendMessage(chatId, catalog.text, { parse_mode: 'Markdown' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:', error.message)
    bot.sendMessage(chatId, 'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainMenu)
  }
})

bot.onText(/üí∞ –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–†–∞–∑–¥–µ–ª —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.', mainMenu)
})

bot.onText(/üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...\n\n–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', mainMenu)
})

bot.onText(/‚ÑπÔ∏è –ü–æ–º–æ—â—å/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(
    chatId,
    '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n' +
      'üçé *–ö–∞—Ç–∞–ª–æ–≥ iPhone* - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏ iPhone —Å —Ü–µ–Ω–∞–º–∏\n' +
      'üì± *–¢–µ–ª–µ—Ñ–æ–Ω—ã* - –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∏ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n' +
      'üí∞ *–¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã* - –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ\n' +
      'üîÑ *–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ* - –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö\n' +
      '‚ÑπÔ∏è *–ü–æ–º–æ—â—å* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É',
    { parse_mode: 'Markdown' }
  )
})

bot.onText(/‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–µ—Ä—Å–∏–∏/, msg => {
  const chatId = msg.chat.id
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone:', iphoneModelsMenu)
})

const loadJW = async msg => {
  const chatId = msg.chat.id
  jwChats.add(chatId)
  bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏ —Å jw.org/ru –∫–∞–∂–¥—ã–π —á–∞—Å.')

  if (!jwIntervalStarted) {
    jwIntervalStarted = true
    setInterval(async () => {
      const title = await getJwCurrentArticleTitle()
      if (title && title !== lastJwTitle) {
        lastJwTitle = title
        for (const id of jwChats) {
          bot.sendMessage(id, `üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏ —Å jw.org/ru:\n${title}`)
        }
      }
    }, 60 * 1 * 1000)
  }

  const title = await getJwCurrentArticleTitle()
  if (title && title !== lastJwTitle) {
    lastJwTitle = title
    bot.sendMessage(chatId, `üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç—å–∏ —Å jw.org/ru:\n${title}`)
  }
}

bot.onText(/üì∞ –°—Ç–∞—Ç—å—è JW.org/, loadJW)
bot.onText(/\/jw/, loadJW)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîã –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
// bot.onText(/üîã –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞/, msg => {
//   const chatId = msg.chat.id

//   let temperature = osxTemp.cpuTemperature()
//   let color = 'üü¢'
//   if (temperature.max > 70) color = 'üü°'
//   if (temperature.max > 85) color = 'üî¥'
//   const tempStr = Number(temperature.max).toFixed(2)

//   bot.sendMessage(chatId, `üñ•Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n${color} –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: ${tempStr}¬∞C`)
// })

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
// bot.onText(/\/temp/, async msg => {
//   const chatId = msg.chat.id

//   let temperature = osxTemp.cpuTemperature()

//   bot.sendChatAction(chatId, 'typing')
// })

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('message', msg => {
  const chatId = msg.chat.id
  const text = msg.text

  if (
    text === '/start' ||
    text === '/prices' ||
    text.match(
      /üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã|iPhone|Android|‚Ü©Ô∏è –ù–∞–∑–∞–¥|üçé –ö–∞—Ç–∞–ª–æ–≥ iPhone|üí∞ –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã|üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ|‚ÑπÔ∏è –ü–æ–º–æ—â—å|Samsung|Samsung Galaxy S2[45]/
    )
  ) {
    return
  }

  bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', mainMenu)
})

bot.on('polling_error', error => {
  console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ Telegram API:', error.message)
})

bot.on('callback_query', async query => {
  const chatId = query.message.chat.id
  const data = query.data

  if (data.startsWith('specs_')) {
    const [_, version, model] = data.split('_')

    try {
      const phoneData = links['iphone'][version][model]

      if (!phoneData) {
        return bot.answerCallbackQuery(query.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      }

      let specsText = `üìã *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ iPhone ${version} ${model}*\n\n`

      const specs = [
        { icon: 'üì±', name: '–î–∏—Å–ø–ª–µ–π', value: phoneData.displayDetails || phoneData.display },
        { icon: 'üìè', name: '–†–∞–∑–º–µ—Ä—ã', value: phoneData.dimensions },
        { icon: '‚öñÔ∏è', name: '–í–µ—Å', value: phoneData.weight },
        { icon: 'üß†', name: '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', value: phoneData.chipDetails || phoneData.chip },
        { icon: 'üíæ', name: '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', value: phoneData.ram },
        { icon: 'üíΩ', name: '–•—Ä–∞–Ω–∏–ª–∏—â–µ', value: phoneData.memory },
        { icon: 'üì∑', name: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞–º–µ—Ä–∞', value: phoneData.mainCamera || phoneData.camera },
        { icon: 'ü§≥', name: '–§—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞', value: phoneData.frontCamera },
        { icon: 'üîã', name: '–ë–∞—Ç–∞—Ä–µ—è', value: phoneData.batteryDetails || phoneData.battery },
        { icon: 'üîå', name: '–ó–∞—Ä—è–¥–∫–∞', value: phoneData.charging },
        { icon: 'üí¶', name: '–í–æ–¥–æ–∑–∞—â–∏—Ç–∞', value: phoneData.waterResistance },
        { icon: 'üîí', name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', value: phoneData.security },
        { icon: 'üì∂', name: '–°–≤—è–∑—å', value: phoneData.connectivity },
      ]

      specs.forEach(spec => {
        if (spec.value) {
          specsText += `${spec.icon} *${spec.name}:* ${spec.value}\n`
        }
      })

      bot.answerCallbackQuery(query.id)

      bot.sendMessage(chatId, specsText, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üõí –ö—É–ø–∏—Ç—å', url: phoneData.buyLink || 'https://www.apple.com/ru/iphone/' }],
            [{ text: 'üì∏ –§–æ—Ç–æ', callback_data: `photos_${version}_${model}` }],
          ],
        },
      })
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ iPhone ${version} ${model}:`, error.message)
      bot.answerCallbackQuery(query.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫')
    }
  }
})

console.log('–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
